/**	Loads swf files and caches them in memory.  	This class should not be used to load infinite files*/package pdh.shell.section{	import flash.display.Sprite;		import flash.net.URLRequest;		import flash.display.Loader;	import flash.system.LoaderContext;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.ProgressEvent		import pdh.shell.events.SectionEvent;	import pdh.shell.section.SectionLoadObject;		public class SectionLoader extends Sprite{					protected var w:Number;		protected var h:Number;		private var swfLoader:Loader;		private var loadedSwfArray:Array;		private var loadObj:Object;		private var loading:Boolean = false;		private var useCache:Boolean = true;				public function SectionLoader()		{				loadedSwfArray = new Array();		}						public function setSize(_w:Number, _h:Number):void		{			w = _w;			h = _h;						if (swfLoader != null){				var MC:MovieClip = swfLoader.content as MovieClip; 				try{					MC.setSize(w, h);				} catch(err){};			}					}						public function load(obj:SectionLoadObject):void 		{						loadObj = obj				   trace("[SectionLoader] loading file: " + loadObj.file + " | " + loadObj.config)		   		   if (loadObj.file == undefined){			   dispatchEvent(new SectionEvent(SectionEvent.LOAD_ERROR, loadObj ));			   trace("LOAD ERROR!")			   return;   		   }				// cancel any loads in progress			if (loading) cancelLoad();									// put last swf into standby mode			if (swfLoader != null){				var MC:MovieClip = swfLoader.content as MovieClip;				try{					if (MC != null) MC.standby();				} catch(err){}			}						// check to see if new swf is stored in memory			var storedClip:Loader = getStoredClip(loadObj.file);															// if found, attach stored swf to display container				if (storedClip != null){				trace("swf found in memory, adding old reference " + storedClip);				addToDisplay(storedClip);				swfLoader = storedClip;				initSWF(storedClip.content as MovieClip, false);			// else start a load			} else {				loadNewSWF();			}					}								private function getStoredClip(_file):Loader		{			var clip:Loader;			for (var i:int = 0 ; i < loadedSwfArray.length; i++){				trace(loadedSwfArray[i].file + " | " +  _file)				if (loadedSwfArray[i].file == _file){					clip = loadedSwfArray[i].ldr;				}			}			return clip;		}												// each swf should only be loaded once		private function loaded(e:Event):void 		{			trace("[SectionLoader] loaded: " + e.target.url + " | adding " + loadObj.config)						swfLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loaded);  			swfLoader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, handleLoading);  			loading = false;									if (useCache){				loadedSwfArray.push({  file:loadObj.file, ldr:e.target.loader  });			}						addToDisplay(e.target.loader);			initSWF(e.target.content as MovieClip, true);		}				// each swf should only be loaded once		private function handleLoading(e:ProgressEvent):void 		{			var pcent:Number = e.bytesLoaded / e.bytesTotal;			//trace("percent = " + e.bytesLoaded + " / " + e.bytesTotal);			dispatchEvent(new SectionEvent(SectionEvent.LOADING, {value:pcent, pagename:loadObj.id} ));		}				private function initSWF(targetMC:MovieClip, firstLoad:Boolean):void 		{							if (targetMC == null) return;							try{					targetMC.setSize(w, h);					if (firstLoad){						targetMC.startup(loadObj.config, loadObj.section);					} else{						targetMC.restart(loadObj.config, loadObj.section);								}				} catch (err){}				dispatchEvent(new SectionEvent(SectionEvent.COMPLETE, {pageName:loadObj.id}));		}						// override this to add transitions between loads		protected function addToDisplay(ldr:Loader):void 		{						if (ldr == null) return;						// remove old			while (numChildren > 0){				removeChildAt(0);			}			addChild(ldr);				}								private function loadNewSWF():void 		{			loading = true;			var separateDefinitions:LoaderContext = new LoaderContext();						swfLoader = new Loader();				var urlReq:URLRequest = new URLRequest(loadObj.file);			swfLoader.load(urlReq, separateDefinitions);		   			swfLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded, false, 0, true);  			swfLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, handleLoading, false, 0, true);  					}						private function cancelLoad():void 		{			if (swfLoader != null){				swfLoader.contentLoaderInfo.removeEventListener(Event.COMPLETE, loaded);  				swfLoader.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, handleLoading);  				swfLoader.close();				swfLoader = null;			}			loading = false;		}				}}