package pdh.util{	import gs.TweenLite;	import gs.easing.*;	import flash.events.IOErrorEvent;	import flash.net.URLRequest;		import flash.display.Loader;	import flash.events.Event;	import flash.events.ProgressEvent;	import pdh.ui.UIObject;	import flash.display.Bitmap;	import pdh.events.PhotoViewerEvent;		public class PhotoViewer extends UIObject	{		private var ldr				:Loader;		private var fadeInTime		:Number = .2;		private var isLoaded		:Boolean = false;		private var sizeAdjusted	:Boolean = false;		private var autoSize		:Boolean = false;				function PhotoViewer(file:String ="")		{			if (file != "") load(file);			this.mouseChildren = false;		}				public function setFadeInTime(val:Number):void 		{			fadeInTime = val;		}				public function set fadeTime(val:Number):void 		{			fadeInTime = val;		}				public function load(file:String){			trace("[PhotoViewer] loading " + file)						if (ldr != null){				clear()			}						ldr = new Loader();				ldr.contentLoaderInfo.addEventListener(Event.COMPLETE, loaded, false, 0, true) 			ldr.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, loading, false, 0, true) 			ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError, false, 0, true) 			addChild(ldr);						var urlReq:URLRequest = new URLRequest(file);			ldr.load(urlReq);		}				private function loaded(e:Event):void 		{			isLoaded = true;			if (sizeAdjusted) adjustSize();			ldr.contentLoaderInfo.removeEventListener(Event.COMPLETE, loaded);			ldr.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, loading);			ldr.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);  			dispatchEvent(new PhotoViewerEvent(PhotoViewerEvent.LOADED));			TweenLite.from(ldr, fadeInTime, {alpha:0, onComplete:fadeComplete})			}				private function onIOError(e:IOErrorEvent):void 		{			// do something		}				private function loading(e:ProgressEvent):void 		{			var pcent:Number = e.bytesLoaded / e.bytesTotal;				dispatchEvent(new PhotoViewerEvent(PhotoViewerEvent.LOADING, {value:pcent}));		}				private function fadeComplete():void 		{			dispatchEvent(new PhotoViewerEvent(PhotoViewerEvent.VISIBLE));		}				private function adjustSize():void 		{			if (!autoSize) return						if (!isLoaded  || ldr == null) return;						// horizontal photo			if (ldr.height > ldr.width){				// horizontal area				if (h > w){					fitToWidth()				} else {					fitToHeight()				}			}			// vertical photo			else {				if (w > h){					fitToHeight()				} else {					fitToWidth()				}			}		}				public function smooth():void 		{			var bitmap = ldr.content as Bitmap;			bitmap.smoothing = true;		}				private function fitToHeight():void 		{			ldr.height = h;			ldr.scaleX = ldr.scaleY;			ldr.x = (w/2) - (ldr.width/2)			smooth();		}				private function fitToWidth():void 		{			ldr.width = w			ldr.scaleY = ldr.scaleX;			ldr.y = (h/2) - (ldr.height/2)			smooth();		}				public override function destroy():void		{			clear();		}				public function setSize(_w, _h):void 		{			autoSize = true			sizeAdjusted = true;			w = _w;			h = _h;			adjustSize()					}				public function clear():void 		{			if (ldr != null){				ldr.contentLoaderInfo.removeEventListener(Event.COMPLETE, loaded);				ldr.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, loading);				try{					ldr.close();				} catch(err){};				ldr = null;			}			while(numChildren > 0){				removeChildAt(0);			}		}					}	}