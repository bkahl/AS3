package pdh.bitmap{	public class MirrorImage	{				import flash.filters.GradientGlowFilter;		import flash.filters.BitmapFilterQuality;		import flash.filters.BitmapFilterType;					import flash.display.BitmapData;		import flash.geom.Point;		import flash.geom.Rectangle;		import flash.geom.Matrix;						public static function create(bitmap:BitmapData, color:Number):BitmapData		{			var rect:Rectangle = bitmap.clone().rect;						// apply filter to new bitmap							var distance:Number  = 30;			var angleInDegrees:Number = 90;			var colors:Array     = [color, color];			var alphas:Array     = [1, .8];			var ratios:Array     = [0, 255];			var blurX:Number     = 0;			var blurY:Number     = 50;			var strength:Number  = 1;			var quality:Number   = BitmapFilterQuality.LOW;			var type:String      = BitmapFilterType.INNER;			var knockout:Boolean = false;			var filter:GradientGlowFilter = new GradientGlowFilter(distance, angleInDegrees,  colors,  alphas,  ratios,  blurX,  blurY,  strength,  quality,  type,	  knockout);			var filteredBitMap:BitmapData = new BitmapData(rect.width, rect.height);			filteredBitMap.applyFilter(bitmap, rect, new Point(0, 0), filter)						// flip vertically			var flipVerticalMatrix:Matrix = new Matrix()			flipVerticalMatrix.scale(1,-1)			flipVerticalMatrix.translate(0,rect.height)			var finalBitmap:BitmapData = new BitmapData(rect.width, rect.height);			finalBitmap.draw(filteredBitMap, flipVerticalMatrix);						return finalBitmap;		}					}		}