package pdh.math{		public class Angle	{				public static function actualAngle(oldAngle:Number, newAngle:Number):Number		{			var distanceNormal:Number = Math.abs(oldAngle - newAngle);			var distanceForward:Number = Math.abs(oldAngle - (newAngle + 360));			var distanceBackward:Number = Math.abs(oldAngle - (newAngle - 360));			var actualNewAngle:Number;			if (Math.min(distanceNormal, Math.min(distanceForward, distanceBackward)) == distanceForward) {				actualNewAngle = newAngle + 360;			} else if (Math.min(distanceNormal, Math.min(distanceForward, distanceBackward)) == distanceBackward) {				actualNewAngle = newAngle - 360;			} else {				actualNewAngle = newAngle;			}			return actualNewAngle;					}				public static function deg2rad(degree:Number) 		{    		 return degree * (Math.PI / 180);		}		} // end class	}  // end package