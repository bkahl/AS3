package pdh.math{		public class ConvertTime	{				// returns a string in HH:MM format if given a number in seconds		public static function secondsToHHMM (secs:Number):String 		{			var hour:Number;			var min:Number;			var hourStr:String;			var minStr:String;					var lenMin:Number =secs/60;		   			if (lenMin <=0) {			  return "00:00";			}			else if(lenMin > (99*60)+59){ // greater than can be shown in 99:59			  return "99:59";			}			else {			  // work out how many hours and mins and concatenate them for the time			  hour = Math.floor(lenMin/60); //get the number of hours			  min = Math.round(lenMin%60); //get the remainder 0-59 mins			 			  // convert to strings			  hourStr = hour.toString();			  minStr = min.toString();			 			  // if minStr is 2 character, leave it alone, if it's 1 char, pad it, if it's more than 2 make it "99"			  if (hourStr.length == 1) {				hourStr = "0" + hourStr;			  }			  else if (hourStr.length > 2) {				hourStr = "99"; // this is impossible!			  }			  // if secStr is 2 digits, leave it alone, if it's 1, pad it, if it's more than 2 make it "99"			  if (minStr.length == 1) {				minStr = "0" + minStr;			  }			  else if (minStr.length > 2) {				minStr = "59"; // this is impossible!			  }			 			  return hourStr + ":" + minStr;			}		  }  		  // returns a string in MM:SS format if given a number in seconds		  public static function secondsToMMSS(time:Number):String		  {			var remainder:Number;						var hours:Number = time / ( 60 * 60 );						remainder = hours - (Math.floor ( hours ));						hours = Math.floor ( hours );						var minutes = remainder * 60;						remainder = minutes - (Math.floor ( minutes ));						minutes = Math.floor ( minutes );						var seconds = remainder * 60;						remainder = seconds - (Math.floor ( seconds ));						seconds = Math.floor ( seconds );						var hString:String = hours < 10 ? "0" + hours : "" + hours;				var mString:String = minutes < 10 ? "0" + minutes : "" + minutes;			var sString:String = seconds < 10 ? "0" + seconds : "" + seconds;									if ( time < 0 || isNaN(time)) return "00:00";												if ( hours > 0 )			{							return hString + ":" + mString + ":" + sString;			}else			{				return mString + ":" + sString;			}		  }		  		  // converts MM:SS string to seconds		  public static function MMSStoSeconds(time:String):Number 		  {			  var sec = time.split(":");			  var combined = Number(sec[0] * 60) + Number(sec[1]);			  return combined;		  }		} // end class	}  // end package