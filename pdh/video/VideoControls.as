package pdh.video{		import flash.display.MovieClip;			import flash.events.Event;	import flash.utils.Dictionary;	import flash.events.MouseEvent;	import flash.text.TextField;	import pdh.math.ConvertTime;	import pdh.events.VideoControlsEvent;	import pdh.graphics.Box;	import pdh.ui.UIObject;	import pdh.events.SeekBarEvent;	import flash.accessibility.AccessibilityProperties;		public class VideoControls extends UIObject{					// stage instance		public var play_btn	:MovieClip;		public var playpause_btn:MovieClip;		public var seekbar_mc:MovieClip;		public var caption_button:MovieClip;		public var volume_btn:MovieClip;		public var fullscreen_btn:MovieClip		private var isPlay:Boolean = true;		private var _autoHide:Boolean;		public var time_txt:TextField;		private var box:Box;				public function VideoControls()		{							init();			addListeners();		}										private function init():void 		{			/*var accessProps:AccessibilityProperties = new AccessibilityProperties();			accessProps.silent = true			seekbar_mc.track_mc.accessibilityProperties = accessProps;			seekbar_mc.drag_mc.accessibilityProperties = accessProps;*/						if (caption_button != null){				caption_button.on_mc.visible = false				caption_button.off_mc.visible = true;			}						if (playpause_btn != null){				playpause_btn.buttonMode = true				resetButtonStates(playpause_btn.pause_mc)				resetButtonStates(playpause_btn.play_mc)			}						if (seekbar_mc != null){				seekbar_mc.disableClickTween()				seekbar_mc.progress_mc.mouseEnabled = false;				seekbar_mc.drag_mc.buttonMode = false;				seekbar_mc.progress_mc.buttonMode = false;				seekbar_mc.progress_mc.buttonMode = false;				seekbar_mc.track_mc.buttonMode = false;			}						// create mask for controls			box = new Box(this.width, this.height, 0x000000, 1);						//play_btn.play_icon.visible = false;		}				public function captionToggle():Boolean		{			if (caption_button.on_mc.visible){				caption_button.on_mc.visible = false				caption_button.off_mc.visible = true;				return false			} else {				caption_button.on_mc.visible = true				caption_button.off_mc.visible = false;				return true			}		}				private function resetButtonStates(but:MovieClip):void 		{			if (but.disabled != null){				but.over.visible = false;				but.down.visible = false;				but.disabled.visible = false;			}		}						private function addListeners():void 		{			if (seekbar_mc != null){				seekbar_mc.addEventListener(SeekBarEvent.UPDATE, handleScrub, false, 0, true);				seekbar_mc.drag_mc.addEventListener(MouseEvent.MOUSE_DOWN, handleDrag,false,0,true)				seekbar_mc.drag_mc.addEventListener(MouseEvent.MOUSE_UP, handleDrag,false,0,true)				seekbar_mc.track_mc.addEventListener(MouseEvent.MOUSE_DOWN, handleTrackClick,false,0,true)			}						//playpause_btn.addEventListener(MouseEvent.MOUSE_DOWN, handlePlayDown, false, 0, true)			//playpause_btn.addEventListener(MouseEvent.MOUSE_UP, handlePlayUp, false, 0, true)			if (playpause_btn != null){				playpause_btn.addEventListener(MouseEvent.CLICK, handlePlayUp, false, 0, true)				playpause_btn.addEventListener(MouseEvent.MOUSE_OVER, handlePlayOver, false, 0, true)				playpause_btn.addEventListener(MouseEvent.MOUSE_OUT, handlePlayOut, false, 0, true)			}		}						public function get hasSeekBar():Boolean 		{			if (seekbar_mc != null){				return true			} else {				return false;			}		}				public function disable():void 		{			seekbar_mc.mouseEnabled = false;			seekbar_mc.mouseChildren = false;		}				public function enable():void		{			seekbar_mc.mouseEnabled = true;			seekbar_mc.mouseChildren = true;		}				public function reset():void 		{			seekbar_mc.setProgress(0);			seekbar_mc.reset()		}						private function handlePlayOver(e:MouseEvent):void 		{			if (playpause_btn.pause_mc.hasOwnProperty("over")){				if (playpause_btn.pause_mc.visible){					playpause_btn.pause_mc.over.visible = true				} else {					playpause_btn.play_mc.over.visible = true				}			}		}				private function handlePlayOut(e:MouseEvent):void 		{			if (playpause_btn.pause_mc.hasOwnProperty("over")){				if (playpause_btn.pause_mc.visible){					playpause_btn.pause_mc.over.visible = false				} else {					playpause_btn.play_mc.over.visible = false				}			}		}				private function handlePlayDown(e:MouseEvent):void 		{			if (playpause_btn.pause_mc.hasOwnProperty("down")){				if (playpause_btn.pause_mc.visible){					playpause_btn.pause_mc.down.visible = true				} else {					playpause_btn.play_mc.down.visible = true				}			}		}				private function handlePlayUp(e:MouseEvent):void 		{			if (playpause_btn.pause_mc.hasOwnProperty("down")){				if (playpause_btn.pause_mc.visible){					playpause_btn.pause_mc.down.visible = false				} else {					playpause_btn.play_mc.down.visible = false				}			}						if (isPlay){				dispatchEvent( new VideoControlsEvent(VideoControlsEvent.PLAY));				//isPlay = false;				//playpause_btn.pause_mc.visible = true;				//playpause_btn.play_mc.visible = false;			} else {				dispatchEvent( new VideoControlsEvent(VideoControlsEvent.PAUSE));				//isPlay = true;				//playpause_btn.pause_mc.visible = false;				//playpause_btn.play_mc.visible = true;			}		}				private function handleTrackClick(e:MouseEvent):void 		{			// (track_mc.mouseX * track_mc.scaleX) / track_mc.width;			var clickValue:Number = ((e.localX * seekbar_mc.track_mc.scaleX )  / seekbar_mc.track_mc.width)			dispatchEvent(new VideoControlsEvent(VideoControlsEvent.SCRUB_UPDATE, {value:clickValue}))			//dispatchEvent(new VideoControlsEvent(VideoControlsEvent.SCRUB_STARTED))		}				public function set autoHide(val:Boolean):void 		{			if (_autoHide == val) return;						_autoHide = val;						if (val){				box.y = y;				box.x = x;				addChild(box);				mask = box;			} else {				removeChild(box);				mask = null;			}		}				public function get autoHide():Boolean 		{			return _autoHide;		}								public function setSize(_w:Number, _h:Number):void		{			w = _w;			h = _h;							this.y = (h/2) - (this.height / 2);					}						public function setTime(_playtime:Number, _totalTime:Number):void 		{			if (time_txt != null){				time_txt.text = ConvertTime.secondsToMMSS(_playtime) + "/" + ConvertTime.secondsToMMSS(_totalTime);				trace(time_txt.text)			}		}						public function showPlayButton(val:Boolean):void 		{			isPlay = val;						if (playpause_btn == null) return;						if (isPlay){				playpause_btn.pause_mc.visible = false;				playpause_btn.play_mc.visible = true;			} else {				playpause_btn.pause_mc.visible = true;				playpause_btn.play_mc.visible = false;			}		}						public function update(param:Object):void 		{			time_txt.text = Math.round(param.time).toString();		}						private function handleDrag(e:MouseEvent):void 		{			switch(e.type){				case MouseEvent.MOUSE_DOWN:					dispatchEvent(new VideoControlsEvent(VideoControlsEvent.SCRUB_STARTED))					break;				case MouseEvent.MOUSE_UP:					dispatchEvent(new VideoControlsEvent(VideoControlsEvent.SCRUB_STOPPED))					break;							}		}				private function handleScrub(e:SeekBarEvent):void 		{			dispatchEvent(new VideoControlsEvent(VideoControlsEvent.SCRUB_UPDATE, {value:e.parameters.value}))			//videoPlayer.seekPercent(e.parameters.value * 100)		}				public override function destroy():void 		{			if (seekbar_mc != null){				seekbar_mc.removeEventListener(SeekBarEvent.UPDATE, handleScrub);				seekbar_mc.drag_mc.removeEventListener(MouseEvent.MOUSE_DOWN, handleDrag)				seekbar_mc.drag_mc.removeEventListener(MouseEvent.MOUSE_UP, handleDrag)				seekbar_mc.track_mc.removeEventListener(MouseEvent.MOUSE_DOWN, handleTrackClick)				seekbar_mc.destroy()			}						if (playpause_btn != null){				playpause_btn.removeEventListener(MouseEvent.MOUSE_DOWN, handlePlayDown)				playpause_btn.removeEventListener(MouseEvent.MOUSE_UP, handlePlayUp)				playpause_btn.removeEventListener(MouseEvent.MOUSE_OVER, handlePlayOver)				playpause_btn.removeEventListener(MouseEvent.MOUSE_OUT, handlePlayOut)			}					}								}}