/**	Displays either video or photos for exhibits*/package pdh.components{	import pdh.ui.UIObject;		import gs.TweenLite;	import gs.easing.*;		import pdh.video.VideoPlayerCombo;		import flash.display.MovieClip;	import flash.display.Loader;	import flash.text.TextField	import flash.text.TextFieldAutoSize;	import flash.net.URLRequest;	import flash.events.Event;	import flash.events.MouseEvent;	import pdh.util.PhotoViewer;	import pdh.events.PhotoViewerEvent;	import pdh.events.MediaViewerEvent	import pdh.graphics.Box;	import flash.display.Sprite;			public class MediaViewer extends UIObject{						private var photoContainer	:PhotoViewer		private var videoContainer	:VideoPlayerCombo;		private var bufferIcon		:MovieClip;		private var videoMode		:Boolean = false;		private var _autoHide		:Boolean = false;						public function MediaViewer(file:String = null, _w:Number = 500, _h:Number = 500)		{								init();			addListeners();			w = _w;			h = _h;			if (file != null){				loadMedia(file)			}		}						public function addListeners():void		{								}				private function init():void 		{						cacheAsBitmap = true;					bufferIcon = new BufferingBar()		}				public override  function hide():void 		{			TweenLite.to(this, .5, {alpha:0,  onComplete:hideDone});		}				private function hideDone():void 		{			this.visible = false;		}				public function set autoHideControls(val:Boolean):void 		{			if (videoContainer != null){				videoContainer.autoHide = val;			}			_autoHide = val;						}				public override function show():void 		{			this.visible = true;			TweenLite.to(this, 1,{alpha:1});		}				public function setSize(_w, _h):void 		{			w = _w;			h = _h;									if (photoContainer != null){				photoContainer.setSize(w, h);			} 						if (videoContainer != null){				videoContainer.setSize(w, h);							}					}				public override function get width():Number		{			if (videoMode){				return videoContainer.width										} else {				return photoContainer.width			}					}				public override function get height():Number		{			if (videoMode){				return videoContainer.height				} else {				return photoContainer.height			}					}								public function loadMedia(val:String):void 		{						if (val.indexOf(".flv") != -1){				setVideo(val);			} else{				setPhoto(val);			}					}				public override function stop():void 		{			if (videoMode){				videoContainer.stopVideo();			}		}					private function setVideo(val:String):void 		{			videoMode = true;						videoContainer = new VideoPlayerComponent();			videoContainer.autoHide = _autoHide;			videoContainer.loadVideo(val);			videoContainer.setSize(w, h);			addChild(videoContainer);						videoContainer.visible = false;			//TweenLite.to(videoContainer, 1, {alpha:1, onComplete: tweenDone});			TweenLite.delayedCall(.5, tweenDone);						//dispatchEvent(new MediaViewerEvent(MediaViewerEvent.VISIBLE))			}				private function tweenDone():void 		{			videoContainer.visible = true;			dispatchEvent(new MediaViewerEvent(MediaViewerEvent.LOADED))		}				public function moveControlsTo(newcontainer:Sprite):void 		{			if (videoContainer != null){				videoContainer.autoHide = false;				videoContainer.moveControlsTo(newcontainer)			}		}				private function setPhoto(val:String):void 		{			videoMode = false;						photoContainer = new PhotoViewer(val);			photoContainer.fadeTime = 1			photoContainer.addEventListener(PhotoViewerEvent.VISIBLE, imagevis, false, 0, true);			photoContainer.addEventListener(PhotoViewerEvent.LOADED, imageLoaded, false, 0, true);			addChild(photoContainer);			photoContainer.setSize(w,h);									bufferIcon.x = (w/2)			bufferIcon.y = (h/2)						TweenLite.delayedCall(1, addBufferIcon)					}				private function addBufferIcon():void 		{			photoContainer.addChild(bufferIcon);		}				// stop any processess running and clear any references 		// which might cause this object not to be deleted		public override function destroy():void 		{			if (photoContainer != null){				photoContainer.removeEventListener(PhotoViewerEvent.VISIBLE, imagevis);				photoContainer.removeEventListener(PhotoViewerEvent.LOADED, imageLoaded);				photoContainer.destroy();			} 						if (videoContainer != null){				videoContainer.destroy();			}						while(numChildren > 0){				removeChildAt(0);			}		}						//------------------------------------------------------------------------------HANDLERS										 private function imageLoaded(evt:Event):void 		 {																					dispatchEvent(new MediaViewerEvent(MediaViewerEvent.LOADED))				TweenLite.killDelayedCallsTo(addBufferIcon)			if (photoContainer.contains(bufferIcon))				photoContainer.removeChild(bufferIcon);     	 }		 		  private function imagevis(evt:Event):void 		 {																					dispatchEvent(new MediaViewerEvent(MediaViewerEvent.VISIBLE))			     	 }			} // end class} // end package