package pdh.components.flipbook{			import flash.events.Event;	import flash.events.MouseEvent;	import pdh.util.PhotoViewer;	import pdh.events.PhotoViewerEvent;	import pdh.components.flipbook.FlipObject	import pdh.bitmap.BitmapTools;	import flash.display.*	import gs.TweenMax;	import pdh.graphics.Box;	import pdh.events.FlipBookEvent;	public class FlipBook extends Sprite	{		private var pageArray			:Array;		private var loadedPhotoArray	:Array;		private var currentPage			:int = 0				private var pageHolder			:Sprite;				private var w					:Number = 0;		private var h					:Number = 0;				private var butRight			:Box;		private var butLeft				:Box;				function FlipBook(_dat:Array):void 		{			init(_dat)			addListeners()		}				private function init(_dat:Array):void 		{			pageHolder = new Sprite();			addChild(pageHolder)			loadPages(_dat)			butRight = new Box(100,100)			butRight.alpha = 0;			butLeft = new Box(100,100)			butLeft.alpha = 0;		}				private function addListeners():void 		{			butRight.addEventListener(MouseEvent.MOUSE_DOWN, flipRight)			butLeft.addEventListener(MouseEvent.MOUSE_DOWN, flipLeft)		}				private function loadPages(_dat:Array):void 		{			loadedPhotoArray = new Array()			for (var i:int = 0 ; i < _dat.length; i++){				var loader:PhotoViewer = new PhotoViewer(_dat[i].src)				loadedPhotoArray.push(loader);			}			loadedPhotoArray[_dat.length - 1].addEventListener(PhotoViewerEvent.LOADED, handlePhotosLoaded)		}				private function handlePhotosLoaded(e:PhotoViewerEvent):void 		{			trace("photos loaded")						if (w == 0){				w = loadedPhotoArray[0].width				h = loadedPhotoArray[0].height			}						butRight.width = butLeft.width = w;			butRight.height = butLeft.height = h;			butLeft.x = -butLeft.width						butLeft.visible = false						TweenMax.delayedCall(1,createPages, [loadedPhotoArray])		}				private function createPages(_dat:Array):void 		{			pageArray = new Array();			for (var i:int = 0 ; i < _dat.length; i = i + 2){								var side1:BitmapData = BitmapTools.getBitmapData(_dat[i])				var side2:BitmapData = BitmapTools.getBitmapData(_dat[i+1])								var npage:FlipObject = new FlipObject(side1,side2);				npage.setSize(w, h)								npage.init();								trace("adding page to array " + npage)				pageArray.push(npage)			}						// set z order - slopppy method to run this loop again			for (i = pageArray.length-1 ; i > -1 ; i--){				pageHolder.addChild(pageArray[i])			}									addChild(butLeft);			addChild(butRight);						centerRightPage()						dispatchEvent(new FlipBookEvent(FlipBookEvent.LOADED));					}				private function centerRightPage():void 		{			butLeft.visible = false;			butRight.visible = true;			butRight.x = -(butRight.width /2)			var targX:Number = -(this.width / 4)			TweenMax.to(pageHolder, 1, {x:targX})		}				private function centerLeftPage():void 		{			butRight.visible = false;			butLeft.visible = true;			butLeft.x = -(butLeft.width /2)			var targX:Number = (this.width / 4)			TweenMax.to(pageHolder, 1, {x:targX})		}				private function centerPage():void 		{			butLeft.x = -butLeft.width			butRight.x = 0			butRight.visible = true;			butLeft.visible = true;			var targX:Number = 0			TweenMax.to(pageHolder, 1, {x:targX})		}				private var lastDir:int = 1;		private var tracker:int= 0		public function flipRight(e:MouseEvent):void 		{			butLeft.visible = true			var dir = 1						if (currentPage < pageArray.length){								tracker ++								dispatchEvent(new FlipBookEvent(FlipBookEvent.FLIPPED, {page:tracker}));				if (lastDir != dir){					currentPage++				}				trace("flip right")				pageHolder.addChild(pageArray[currentPage])				TweenMax.to(pageArray[currentPage], 1, {flipPos:0})				currentPage++				if (currentPage == pageArray.length){					centerLeftPage()				} else {					centerPage()				}			} 			lastDir = dir			trace(currentPage)		}				public function flipLeft(e:MouseEvent):void 		{			var dir = 0						if (currentPage > -1){								tracker --								dispatchEvent(new FlipBookEvent(FlipBookEvent.FLIPPED, {page:tracker}));				if (lastDir != dir){					currentPage--				}				trace("flip left")				pageHolder.addChild(pageArray[currentPage])				TweenMax.to(pageArray[currentPage], 1, {flipPos:1})				currentPage--				if (currentPage == -1){					centerRightPage()				} else {					centerPage()				}			}						lastDir = dir			trace(currentPage)		}						public function setSize(_w:Number, _h:Number):void 		{			w = _w			h = _h		}				public function destroy():void 		{					}					} // end class	} // end package