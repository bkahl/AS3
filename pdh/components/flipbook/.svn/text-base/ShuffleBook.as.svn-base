package pdh.components.flipbook{			import flash.events.Event;	import flash.events.MouseEvent;	import pdh.util.PhotoViewer;	import pdh.events.PhotoViewerEvent;	import pdh.bitmap.BitmapTools;	import flash.display.*	import gs.TweenMax;	import pdh.graphics.Box;	import pdh.events.FlipBookEvent;	public class ShuffleBook extends Sprite	{		private var w		private var h		private var shuffleArray	:Array;		private var currentPage	:int = 0				function ShuffleBook(_dat:Array):void 		{			init(_dat)			addListeners()		}				private function init(_dat:Array):void 		{			shuffleArray = new Array()						// load photos			for (var i:int =0; i <  _dat.length; i++){				var child = new PhotoViewer(_dat[i].src)				shuffleArray.push(child)			}						// add to stage			for (i = shuffleArray.length - 1; i > -1; i--){				addChild(shuffleArray[i])			}								}				private function addListeners():void 		{			this.addEventListener(MouseEvent.MOUSE_DOWN, handleDown, false, 0, true);			shuffleArray[shuffleArray.length - 1].addEventListener(PhotoViewerEvent.LOADED, handleLoaded, false, 0, true)		}				private function handleLoaded(e:PhotoViewerEvent):void 		{			dispatchEvent(new FlipBookEvent(FlipBookEvent.LOADED));		}						//private var tracker:int = 0		private var shuffeling:Boolean = false		private function handleDown(e:MouseEvent):void 		{						if (shuffeling) return						shuffeling = true;			dispatchEvent(new FlipBookEvent(FlipBookEvent.FLIPPED, {page:currentPage}));			TweenMax.to(getChildAt(numChildren - 1), 1, {y:-shuffleArray[currentPage].height, onComplete:shuffled, onCompleteParams:[shuffleArray[currentPage]]})			//TweenMax.to(shuffleArray[currentPage], 1, {y:-shuffleArray[currentPage].height, onComplete:shuffled, onCompleteParams:[shuffleArray[currentPage]]})		}				private function shuffled(val:MovieClip):void 		{			// reorder stuff						setChildIndex(val, 0);						currentPage++			if (currentPage > shuffleArray.length - 1) currentPage = 0;									// tween back into place			TweenMax.to(val, 1, {y:0, onComplete:shuffleDone})		}						private function shuffleDone():void 		{			shuffeling = false		}						public function setSize(_w:Number, _h:Number):void 		{			w = _w			h = _h		}					} // end class	} // end package