package pdh.papervision{		import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.scenes.Scene3D;	import org.papervision3d.cameras.Camera3D;		import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Plane;		import pdh.papervision.CurlingPlane	import pdh.papervision.RenderManager;	import flash.display.*	import gs.TweenMax;	import gs.easing.*;	public class FlipAnimation extends Sprite	{				private var scene				:Scene3D;		private var cam					:Camera3D;		private var rend				:BasicRenderEngine;		private var view				:Viewport3D;		private var renderManager		:RenderManager;				private var targetMC			:Sprite		private var plane1				:CurlingPlane;				private var _speed				:Number = 1;				function FlipAnimation(_target:Sprite, center:Boolean = false){			targetMC = _target;			init(center);		}						private function init(center:Boolean){			view = new Viewport3D(targetMC.width * 2, targetMC.height * 2, center, false);							view.visible = false;			//view.containerSprite.buttonMode = true; // shows hand cursor			addChild(view);								// create scene			scene = new Scene3D();						// create camera			cam = new Camera3D();			cam.x = (targetMC.width / 2)			//cam.y = 20			//cam.zoom = -1000;			cam.z = -345						cam.rotationX = 90;						renderManager = new RenderManager(this, scene, cam, view)								plane1 = new CurlingPlane(targetMC, 10);			scene.addChild(plane1)						plane1.rotate(90);					}				public function offset(_x, _y):void 		{			cam.x = cam.x + _x;			cam.y = cam.y + _y;		}				public function set speed(val:Number):void 		{			_speed = val;		}				public function animateIn():void 		{			view.visible = true;			targetMC.visible = false;			TweenMax.to(cam, _speed, {rotationX:0})			TweenMax.to(plane1, _speed, {rotationDegree:0, onUpdate:render, onComplete:animateDone})		}				public function animateOutTo(val:Number):void 		{			view.visible = true;			targetMC.visible = false;			TweenMax.to(plane1, _speed, {rotationDegree:90, onUpdate:render})						TweenMax.to(view, _speed, {x:val * 2})		}						public function animateFrom(val:Number):void 		{			view.x = 0;			view.visible = true;			targetMC.visible = false;									TweenMax.to(cam, _speed, {rotationX:0})						TweenMax.to(plane1, _speed, {rotationDegree:0, onUpdate:render, onComplete:animateDone})			TweenMax.from(view, _speed, {x:val * 2})					}							private function render(){			renderManager.render()		}				private function animateDone():void 		{			view.visible = false;			//view.alpha = .5			targetMC.visible = true;		}				public function destroy():void 		{			TweenMax.killTweensOf(plane1)			if (renderManager != null)				renderManager.destroy()			renderManager = null;			removeChild(view)			if (plane1 != null){				scene.removeChild(plane1)				plane1.destroy()			}			plane1 = null			scene = null			cam = null			rend = null			view = null		}							} // end class	} // end package