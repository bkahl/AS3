/**	Navigation bar for the 3d wall	- rotation slider	- two internal links*/package pdh.ui{		import flash.text.TextFieldAutoSize;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.StyleSheet;		import flash.events.MouseEvent;		import gs.TweenLite;	import gs.easing.*;		import pdh.ui.UIObject;	import pdh.ui.MovieButton;		import flash.display.MovieClip;		import flash.utils.Timer;	import flash.events.TimerEvent;		//import br.hellokeita.utils.TextFieldColor;		public class TextScrollBox extends UIObject{			public var SLIDE_AMOUNT		:Number = 13.5;		public const BOTTOM_PADDING	:Number = 10;				public var txt				:TextField;		public var down_btn			:MovieButton;		public var up_btn			:MovieButton;		public var mask_mc			:MovieClip;				private var bottomY			:Number;		private var topY			:Number;				private var timer			:Timer;		private var lastVal			:Number;		private var count			:Number = 0;				public function TextScrollBox()		{					init();			addListeners();			}				private function init():void 		{					//var css = new StyleSheet();			//var cssObj = new Object();						//cssObj.textDecoration = "underline";			//css.setStyle("a",cssObj);			//txt.styleSheet = css;					txt.condenseWhite = true;			//txt.autoSize = TextFieldAutoSize.LEFT;			topY = txt.y;			//bottomY =  mask_mc.height						timer = new Timer(201); 							up_btn.select();			up_btn.isEnabled = false;						//mask_mc.cacheAsBitmap = true;			//txt.cacheAsBitmap = true;						//txt.mask = mask_mc;						//this.cacheAsBitmap = true;		}						public function addListeners():void		{						up_btn.addEventListener(MouseEvent.MOUSE_DOWN, handleUpButton,false,0,true);			down_btn.addEventListener(MouseEvent.MOUSE_DOWN, handleDownButton,false,0,true);			up_btn.addEventListener(MouseEvent.MOUSE_UP, handleReleased,false,0,true);			down_btn.addEventListener(MouseEvent.MOUSE_UP, handleReleased,false,0,true);			timer.addEventListener(TimerEvent.TIMER, autoSlide,false,0,true);		}				public function removeListeners():void		{			up_btn.removeEventListener(MouseEvent.MOUSE_DOWN, handleUpButton);			down_btn.removeEventListener(MouseEvent.MOUSE_DOWN, handleDownButton);			up_btn.removeEventListener(MouseEvent.MOUSE_UP, handleReleased);			down_btn.removeEventListener(MouseEvent.MOUSE_UP, handleReleased);			timer.removeEventListener(TimerEvent.TIMER, autoSlide);		}						public function useSelectionColor():void 		{			var white:uint = 0xffffff;			var black:uint = 0x000000;			var grey = 0x666666;		}								public function addText(val:String, style:StyleSheet = null):void		{			if (style != null){				txt.styleSheet = style;			}						txt.htmlText = val;			txt.scrollV = 0						reset();						if (txt.numLines < 14){				trace("[ScrollBox] making buttons invisible")				up_btn.visible = false;				down_btn.visible = false;			} else {				trace("[ScrollBox] making buttons visible")				up_btn.visible = true;				down_btn.visible = true;			}		}				private function handleUpButton(e:MouseEvent):void 		{			slideClick(SLIDE_AMOUNT);			timer.start()		}				private function handleDownButton(e:MouseEvent):void 		{			clickIncr = 1;				slideClick(-SLIDE_AMOUNT);			timer.start()		}				private function handleReleased(e:MouseEvent):void 		{			autoSlideStop();		}				var clickIncr:int = 1;				private function slideClick(val:Number):void 		{						lastVal = val;						if (val >= 0){				txt.scrollV = txt.scrollV - clickIncr;			} else {				txt.scrollV = txt.scrollV + clickIncr;			}												clickIncr ++						if (clickIncr > 3) clickIncr = 3;						trace(txt.scrollV)						if (txt.scrollV == 1 ){				up_btn.select()				up_btn.isEnabled = false;				down_btn.deselect();				down_btn.isEnabled = true;				autoSlideStop();							} else if (txt.scrollV == txt.maxScrollV){				up_btn.deselect();				up_btn.isEnabled = true;				down_btn.select()				down_btn.isEnabled = false;				autoSlideStop();							} else if (down_btn.selected || up_btn.selected){				down_btn.deselect();				up_btn.deselect();				down_btn.isEnabled = true;				up_btn.isEnabled = true;			}														}				private function autoSlide(e:TimerEvent):void 		{			slideClick(lastVal);		}				private function autoSlideStop():void 		{						timer.stop();			clickIncr = 1;			}		public function reset():void 		{			up_btn.select()			down_btn.deselect();			up_btn.isEnabled = false;			down_btn.isEnabled = true;		}						public function distroy():void 		{			removeListeners();			timer.stop()			timer = null;		}			} // end class} // end package