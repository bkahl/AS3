package pdh.ui{		import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.MovieClip;	import flash.geom.Rectangle;	import pdh.ui.UIObject;	import pdh.events.RangeSliderEvent;		public class RangeSlider extends UIObject	{				// stage instances		public var rightSlider_mc:MovieClip;		public var leftSlider_mc:MovieClip;		public var track_mc:MovieClip;		public var transpLeft_mc:MovieClip;		public var transpRight_mc:MovieClip;				private var min:Number;		private var max:Number;						private var range_min:Number;		private var range_max:Number;				private var scroll_rect		:Rectangle;						function RangeSlider()		{			init();			addListeners();		}						public function get isMaxed():Boolean		{			if (range_min <= min && range_max >= max){				return true;			} else {				return false;			}		}				public function setRangeMax():void 		{			init();						callLater(draw)		}				private function init():void 		{			rightSlider_mc.mouseChildren = false;			rightSlider_mc.right = track_mc.x + track_mc.width;						leftSlider_mc.mouseChildren = false;			leftSlider_mc.left = track_mc.x;		}				private function addListeners():void 		{			rightSlider_mc.addEventListener(MouseEvent.MOUSE_DOWN, press_drag,false,0,true)			leftSlider_mc.addEventListener(MouseEvent.MOUSE_DOWN, press_drag,false,0,true)		}						public function getRange():Array 		{			trace("[RangeSlider] getting range of " + range_min + " \ " + range_max)			return [range_min, range_max]		}			public function setRange(_min:Number, _max:Number):void 		{			min = _min;			max = _max;						range_min = min;			range_max = max;						updateDisplay()		}				private function press_drag( e:MouseEvent ):void {			/***************************************************/			root.stage.addEventListener( MouseEvent.MOUSE_UP, leave_drag, false, 0, true );			root.stage.addEventListener( Event.MOUSE_LEAVE, release_drag_outside,false,0,true)			/***************************************************/ 									switch (e.target){				case rightSlider_mc:					scroll_rect = new Rectangle( 												leftSlider_mc.right + rightSlider_mc.width,  // left												0,  // top												Math.ceil(  (track_mc.x + track_mc.width) - (leftSlider_mc.right + rightSlider_mc.width) ) - 1 , // right												0  // bottom												);										break;				case leftSlider_mc:					scroll_rect = new Rectangle( 												track_mc.x,												0,  												rightSlider_mc.x - (rightSlider_mc.width + rightSlider_mc.width), 												0 );					break;											}									e.target.startDrag( false, scroll_rect );			this.addEventListener( Event.ENTER_FRAME, drag ,false,0,true)		}								private function leave_drag( e:MouseEvent ):void {						trace("MOUSE LEAVE");			/*this.removeEventListener( Event.ENTER_FRAME, drag );			root.stage.removeEventListener( Event.MOUSE_LEAVE, release_drag);			root.stage.removeEventListener( MouseEvent.MOUSE_UP, leave_drag );			//e.target.stopDrag();			rightSlider_mc.stopDrag();			leftSlider_mc.stopDrag();*/			stopDragging()		}				private function release_drag( e:MouseEvent ):void {						trace("RELEASE MOUSE");			stopDragging()		}				private function release_drag_outside( e:Event ):void {						trace("RELEASE MOUSE");			stopDragging()		}				private function stopDragging():void 		{			this.removeEventListener( Event.ENTER_FRAME, drag );			root.stage.removeEventListener( Event.MOUSE_LEAVE, release_drag_outside);			root.stage.removeEventListener( MouseEvent.MOUSE_UP, leave_drag );			//e.target.stopDrag();			rightSlider_mc.stopDrag();			leftSlider_mc.stopDrag();						callLater(draw)						dispatchEvent(new RangeSliderEvent(RangeSliderEvent.STOP_SLIDE, getRange()));		}				private function drag( e:Event ):void {						callLater(draw)					}				private function draw():void 		{			calculateValues();			updateDisplay()		}								private function calculateValues():void 		{			var combinedWidth = (rightSlider_mc.width + leftSlider_mc.width);			var adjustedWidth = track_mc.width - combinedWidth;						var l_ratio = ((leftSlider_mc.right - combinedWidth / 2) / adjustedWidth );			var r_ratio = ((rightSlider_mc.left - combinedWidth / 2) / adjustedWidth);									range_min =  Math.round(min + ((max - min) * l_ratio))			range_max = Math.round( min + ((max - min) * r_ratio))		}				private function updateDisplay():void 		{			rightSlider_mc.txt.text =range_max;			leftSlider_mc.txt.text = range_min;						transpRight_mc.x = rightSlider_mc.x - rightSlider_mc.width + 10;			transpLeft_mc.x = leftSlider_mc.x - transpLeft_mc.width + 10;		}			}	}