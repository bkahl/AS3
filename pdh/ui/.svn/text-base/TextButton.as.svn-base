/**	Glow Button		Code by Paul Hannan*/package pdh.ui{	import flash.display.MovieClip;		import flash.events.MouseEvent;	import flash.text.TextField;		import flash.text.TextFormat;	import pdh.ui.IButton;	import pdh.text.TextHelper;		public class TextButton extends MovieClip implements IButton {						// stage instances		public var txt				:TextField		private var _selected		:Boolean = false;		private var _isEnabled		:Boolean = true;		private var color			:Object;		private var useUnderline	:Boolean = false;		private var isHTML			:Boolean = false				public function TextButton(up:Number = 0x999999, over:Number = 0xffffff, down:Number = 0xff0000, select:Number = 0xffffff) 		{					color = new Object();			color.up = up;			color.over = over;			color.down = down;			color.select = select;						if (txt == null){				txt = new TextField()				addChild(txt)			}						txt.textColor = color.up;			txt.mouseEnabled = false;			TextHelper.formatLeft(txt);					addListeners();			buttonMode = true;		}				public function set underlineHover(val:Boolean):void 		{			useUnderline = val;		}				public function setActive(val:Boolean):void 		{			isEnabled = val;		}				public function set text(val:String):void 		{			isHTML = false;			txt.text = val;		}				public function set htmlText(val:String):void 		{			isHTML = true;			txt.htmlText = val;		}				public function get textfield():TextField		{			return txt;		}						public function setColors(up:Number = 0x999999, over:Number = 0xffffff, down:Number = 0xff0000, select:Number = 0xffffff):void		{			color.up = up;			color.over = over;			color.down = down;			color.select = select;			txt.textColor = color.up;		}				private function addListeners():void 		{			this.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseEvent,false,0,true)			this.addEventListener(MouseEvent.MOUSE_UP, handleMouseEvent,false,0,true)			this.addEventListener(MouseEvent.ROLL_OVER, handleMouseEvent,false,0,true)			this.addEventListener(MouseEvent.ROLL_OUT, handleMouseEvent,false,0,true)		}				public function get selected():Boolean		{			return _selected;		}				public function set selected(val:Boolean):void 		{			_selected = val;		}				public function select():void 		{			selected = true;			txt.textColor = color.select;		}				public function deselect():void 		{			selected = false;			txt.textColor = color.up;		}				public function set isEnabled(val:Boolean):void 		{			_isEnabled = val;						if (_isEnabled){				buttonMode = true;				mouseEnabled = true;			} else {				buttonMode = false;				mouseEnabled = false;			}		}				public function get isEnabled():Boolean		{			return _isEnabled;		}				protected function handleMouseEvent(evt:MouseEvent):void 		{			if (!_isEnabled){				return;			}						switch (evt.type) {				case MouseEvent.MOUSE_DOWN:						break ;					case MouseEvent.MOUSE_UP:						if (selected){						txt.textColor = color.select;					} else {						txt.textColor = color.up;					}					break ;					case MouseEvent.ROLL_OVER:						if (useUnderline) addUnderLine()					txt.textColor = color.over;					break ;					case MouseEvent.ROLL_OUT:						if (useUnderline) removeUnderLine()					if (selected){						txt.textColor = color.select;					} else {						txt.textColor = color.up;					}					break ;					default:					break;			}			}				private var storedText:String;		private function addUnderLine():void 		{			if (isHTML){				storedText = txt.htmlText;				txt.htmlText = "<u>" + storedText + "</u>"			} else {				var newFormat:TextFormat = new TextFormat();				newFormat.underline = true				txt.setTextFormat(newFormat);			}		}				private function removeUnderLine():void 		{			if (isHTML){				txt.htmlText = storedText			} else {				var newFormat:TextFormat = new TextFormat();				newFormat.underline = false				txt.setTextFormat(newFormat);			}		}							} // end class} // end package