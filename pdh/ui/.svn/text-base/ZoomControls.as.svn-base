package pdh.ui{	import gs.TweenLite;	import gs.easing.*;	import flash.display.MovieClip;			import flash.events.Event;	import flash.utils.Dictionary;	import flash.events.MouseEvent;	import flash.text.TextField;	import pdh.events.ZoomEvent;	import pdh.ui.UIObject;			public class ZoomControls extends UIObject{					// stage instance		public var zoomout_btn		:MovieClip;		public var zoomin_btn		:MovieClip;		public var zoom_slider		:MovieClip;		public var marker_mc		:MovieClip;		public var snapAmount		:Number = 8;		private var mousePressed	:Boolean = false;		private var range			:Number;				private var _currentZoom:Number = 0				//private var zoomSteps	:int;				//private var lastZoom	:Number;				public function ZoomControls()		{							init();			addListeners();		}						private function addListeners():void 		{			if (zoomout_btn != null)				zoomout_btn.addEventListener(MouseEvent.CLICK, handleOut,false,0,true)			if (zoomin_btn != null)			zoomin_btn.addEventListener(MouseEvent.CLICK, handleIn,false,0,true)			zoom_slider.addEventListener(MouseEvent.MOUSE_DOWN, handleSlideDown,false,0,true)			zoom_slider.addEventListener(MouseEvent.MOUSE_UP, handleSlideUp,false,0,true)		}				/*public function setSteps(val:int):void 		{			zoomSteps = val;		}		*/				private function init():void 		{			zoom_slider.mouseChildren = false;			marker_mc.mouseEnabled = false;			range = zoom_slider.width;		}				private function handleSlideDown(e:MouseEvent):void 		{			mousePressed = true;			doZoom(e.target as MovieClip);			root.stage.addEventListener(MouseEvent.MOUSE_MOVE, handleMove, false, 0, true);			zoom_slider.stage.addEventListener( MouseEvent.MOUSE_UP, handleSlideUp, false, 0, true );			zoom_slider.stage.addEventListener( Event.MOUSE_LEAVE, handleSlideUp, false, 0, true );		}						private function handleSlideUp(e:Event):void 		{			mousePressed = false;			root.stage.removeEventListener(MouseEvent.MOUSE_MOVE, handleMove);			zoom_slider.stage.removeEventListener( MouseEvent.MOUSE_UP, handleSlideUp);			zoom_slider.stage.removeEventListener( Event.MOUSE_LEAVE, handleSlideUp);		}						private function handleMove(e:Event):void 		{			doZoom(zoom_slider as MovieClip)		}						private function doZoom(target:MovieClip):void 		{			var p:Number = target.mouseX / (target.width - (marker_mc.width + snapAmount));			//var p:Number = target.mouseX / (target.width );			//setMarkerX(snapX(target.mouseX + target.x - (marker_mc.width/2)));			setMarkerX(snapX(target.mouseX + target.x));						dispatchEvent(new ZoomEvent(ZoomEvent.ZOOM_TO, {value:p}));					}						public function update(val:Number):void 		{			if (!mousePressed){				setMarkerX(snapX((val *  (range)) + zoom_slider.x));			}						currentZoom = val					}				public function get currentZoom():Number 		{			return _currentZoom;		}				public function set currentZoom(val:Number):void 		{			_currentZoom = val		}				private function setMarkerX(val:Number):void		{									var targX:Number;			var max:Number = ((zoom_slider.x + range) - marker_mc.width);			var min:Number = (zoom_slider.x);			if (val > max){				 targX = max				 if (zoomout_btn != null)						zoomout_btn.setActive(true);				if (zoomin_btn != null)					zoomin_btn.setActive(false)			} 			else if (val < min){				targX = min;				if (zoomout_btn != null)					zoomout_btn.setActive(false);				if (zoomin_btn != null)					zoomin_btn.setActive(true)			}			else {				if (zoomout_btn != null)					zoomout_btn.setActive(true);				if (zoomin_btn != null)					zoomin_btn.setActive(true)				targX = val;			}						marker_mc.x = targX			//TweenLite.to(marker_mc, .1, {x:targX})		}										private function snapX(val:Number):Number		{			var num:Number = val;			num /= snapAmount;			num = Math.round(num);			num *= snapAmount;						return num;					}						private function handleOut(e:Event):void 		{			dispatchEvent(new ZoomEvent(ZoomEvent.ZOOM_OUT));		}				private function handleIn(e:Event):void 		{			dispatchEvent(new ZoomEvent(ZoomEvent.ZOOM_IN));		}						public function setSize(_w:Number, _h:Number):void		{			w = _w;			h = _h;						}						}}