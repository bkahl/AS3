/**	Select list allows you to control multiple IButtons.   The buttons	can behave like radio buttons or check boxes, or a combination.		Create a new select list by passing in a id for the list in teh constructor.		Add a button to track by calling addItem(button instance, button id, radio true or false, group name)		- group name allows you to track groups of buttons in one list.*/package pdh.ui{		import flash.events.EventDispatcher;	import flash.events.MouseEvent;	import pdh.ui.IButton;		import pdh.events.SelectListEvent;	import flash.utils.Dictionary;	import flash.display.DisplayObject;		public class SelectList extends EventDispatcher	{				private var listDict		:Dictionary;		private var lastItem		:IButton;		private var radioAware		:Boolean = false;		private var locked			:Boolean = false;				public var id				:String;				function SelectList(_id)		{			id = _id;			listDict = new Dictionary()		}						public function lock():void 		{			locked = true;		}				public function unlock():void 		{			locked = false;		}				// if radio = true, then this button can be the only one selected ever		public function addItem(item:IButton, _id:String, _radio:Boolean = false, _group:String = "default"):void 		{			listDict[item] = {id:_id, radio:_radio, group:_group}			item.addEventListener(MouseEvent.CLICK, handleMouseUp,false,0,true)			item.addEventListener(MouseEvent.ROLL_OVER, handleMouseOver,false,0,true)			item.addEventListener(MouseEvent.ROLL_OUT, handleMouseOut,false,0,true)			if(_radio) radioAware = true; // list will look out for radio buttons		}				public function getItemById(_id:String):IButton 		{			for (var key:* in listDict) {					if (listDict[key].id == _id) {					return key as IButton;				} 			}						return null;		}						public function selectItemById(val:String, broadcast:Boolean = true):IButton 		{						var but:IButton = getItemById(val)			if (but != null)				 selectItem(but, broadcast)				 			return but;		}				public function selectItem(item:IButton, broadcast:Boolean = true):void 		{			if (locked){				return;			}						// reset prevoius selects			if (listDict[item].radio){				//if (item.selected) return; // can't select a radio button if selected				deselectAll();			} else if (listDict[lastItem].radio){				lastItem.deselect();			}			if (lastItem != null) lastItem.isEnabled = true;									if (item.selected){				// can only deselect if radioAware				if (radioAware){					item.deselect()				}			} else {				item.select()				if (listDict[item].radio) item.isEnabled = false;			}						lastItem = item;							if (broadcast) dispatchEvent(new SelectListEvent(SelectListEvent.SELECTED, listDict[item].id, listDict[item].group, item as DisplayObject));							}				public function deselectItem(item:IButton):void 		{			item.deselect()			item.isEnabled = true;		}				public function deselectAll():void 		{			for (var key:* in listDict) {					key.deselect()				key.isEnabled = true;			}		}				private function getSelectedTotal():int		{			var counter:int = 0;			for (var key:* in listDict) {					if (key.selected) counter ++;			}			return counter;		}				// returns list of items that are selected		public function getSelectedList():Array 		{			var arr = new Array();			for (var key:* in listDict) {					if (key.selected) arr.push(listDict[key].id);			}			return arr;		}				private function handleMouseUp(e:MouseEvent):void 		{			if (locked){				return;			}									selectItem(e.target as IButton);					}				private function handleMouseOut(e:MouseEvent):void 		{			if (locked){				return;			}									dispatchEvent(new SelectListEvent(SelectListEvent.ROLLOUT, listDict[e.target].id, listDict[e.target].group, e.target as DisplayObject));						}				private function handleMouseOver(e:MouseEvent):void 		{			if (locked){				return;			}									dispatchEvent(new SelectListEvent(SelectListEvent.ROLLOVER, listDict[e.target].id, listDict[e.target].group, e.target as DisplayObject));						}					}			}