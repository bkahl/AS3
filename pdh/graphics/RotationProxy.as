package pdh.graphics{		import flash.display.DisplayObject;	import flash.geom.Point;	import flash.geom.Matrix;	import fl.motion.MatrixTransformer;		public class RotationProxy	{				private var clip			:DisplayObject;		private var registration	:Point;				function RotationProxy(_mc:DisplayObject, _regis:Point = null)		{			clip = _mc;			registration = _regis;						if (registration == null) { 			   registration = new Point(_mc.width/2, _mc.height / 2)			}		}						private function rotateAround (obj:*, angleDegrees:Number, pt:Point) 		{			var m:Matrix=obj.transform.matrix;						//MatrixTransformer.rotateAroundInternalPoint(m, pt.x, pt.y, angleDegrees)			MatrixTransformer.setRotation(m, angleDegrees)						obj.transform.matrix=m;					}				private function rotateAroundInternalPoint(m:Matrix, x:Number, y:Number, angleDegrees:Number):void		{					var p:Point = m.transformPoint(new Point(x, y));			rotateAroundExternalPoint(m, p.x, p.y, angleDegrees);		}				private function rotateAroundExternalPoint(m:Matrix, x:Number, y:Number, angleDegrees:Number):void		{			m.translate(-x, -y);			m.rotate(angleDegrees*(Math.PI/180));			m.translate(x, y);		}		 		public function set rotation(val:Number):void 		{			rotateAround(clip, val, registration)		}		 		 		public function get rotation():Number		{			return clip.rotation;			}					}			}